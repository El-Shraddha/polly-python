# This is a basic workflow to help you get started with Actions

name: Add Path

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    env:
      DEPLOY_REPO_NAME: ${{ github.repository }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      DEPLOY_WORKSPACE: ${{ github.workspace }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Run with setup-python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install python dependencies
        run: pip install beautifulsoup4
        
      - name: Run the parsing in python
        shell: python
        run: |
          import os
          import json
          try: 
              from BeautifulSoup import BeautifulSoup
          except ImportError:
              from bs4 import BeautifulSoup
          from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

          directory = os.path.abspath(".")
          for filename in os.listdir(directory):
              f = os.path.join(directory, filename)
              if ( os.path.isfile(f) and os.path.splitext(f)[1] == ".ipynb" ):
                  with open(f) as f_p:
                      data = json.load(f_p)
                      for cell in data['cells']:
                          if 'metadata' in cell and 'id' in cell['metadata'] and cell['metadata']['id'] == "view-in-github":
                              parsed_html = BeautifulSoup(cell['source'][0],"html.parser")
                              parts = urlparse(parsed_html.a['href'])
                              list_parts = list(parts)
                              url_dict = dict(parse_qsl(parts.query))
                              if ( url_dict.get('source') == "github" ):
                                  s = f"{os.environ['DEPLOY_REPO_NAME']}/blob/{os.environ['BRANCH_NAME']}{f.split(os.environ['DEPLOY_WORKSPACE'])[1]}"
                                  if ( url_dict.get("path") != s):
                                      url_dict.update({"path": s})
                                      list_parts[4] = urlencode(url_dict)
                                      enco_url = urlunparse(list_parts)
                                      parsed_html.find('a')['href'] = enco_url
                                      cell['source'][0] = str(parsed_html)
                                      f1 = open(f, "a")
                                      updated_changes = json.dumps(json.loads(json.dumps(data)), indent=2)
                                      print(updated_changes)
                                      f1.write(updated_changes)
                                      f1.close()
      - name: commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "update url path for this repo" -a
          
      - name: push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
